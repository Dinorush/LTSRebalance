untyped

// Code taken from HUD Revamp 1.0 and modified for our purposes
// Credit to JustANormalUser

global struct LTSRebalance_TopoData {
    vector position = Vector( 0.0, 0.0, 0.0 )
    vector size = Vector( 0.0, 0.0, 0.0 )
    vector angles = Vector( 0.0, 0.0, 0.0 )
    var topo
}

global struct LTSRebalance_BarTopoData {
    vector position = Vector( 0.0, 0.0, 0.0 )
    vector size = Vector( 0.0, 0.0, 0.0 )
    vector angles = Vector( 0.0, 0.0, 0.0 )
    int segments = 1
    array<var> imageRuis
    array<LTSRebalance_TopoData> topoData
	float fill
}

global function LTSRebalance_BasicImageBar_CreateRuiTopo
global function LTSRebalance_BasicImageBar_UpdateSegmentCount
global function LTSRebalance_BasicImageBar_SetFillFrac

LTSRebalance_BarTopoData function LTSRebalance_BasicImageBar_CreateRuiTopo( vector posOffset, vector angles, float hudWidth, float hudHeight )
{
    float height = COCKPIT_RUI_HEIGHT * hudHeight
    float width = COCKPIT_RUI_WIDTH * hudWidth
    // we keep roll as-is in case we want a bar that goes down/up or right to left.
    vector _angles = Vector( angles.y * COCKPIT_RUI_HEIGHT, -angles.x * COCKPIT_RUI_WIDTH, angles.z )
    //printt("size", <width, height, 0>, "angles", _angles)
    var topo = CreateBar( posOffset, _angles, width, height )
    LTSRebalance_BarTopoData data
    data.position = posOffset
    data.size = Vector( width, height, 0.0 )
    data.angles = _angles

    LTSRebalance_TopoData topoData
    topoData.position = posOffset
    topoData.size = Vector( width, height, 0.0 )
    topoData.angles = _angles
    topoData.topo = topo

    data.topoData = [ topoData ]
    data.fill = 1

    var rui = RuiCreate( $"ui/basic_image.rpak", data.topoData[0].topo, RUI_DRAW_COCKPIT, -1 )
    data.imageRuis.append( rui )

    return data
}

void function LTSRebalance_BasicImageBar_UpdateSegmentCount( LTSRebalance_BarTopoData data, int segmentCount, float segDistance )
{
    foreach ( var image in data.imageRuis )
    {
        RuiDestroy( image )
    }
    foreach ( LTSRebalance_TopoData topoData in data.topoData )
    {
        RuiTopology_Destroy( topoData.topo )
    }

    float segmentDistance = segDistance / data.size.x

    data.topoData.clear()
    data.imageRuis.clear()

    data.segments = segmentCount

    // data.size.x -  total size of topo
    // (segmentCount - 1) * segmentDistance - total size taken up by distances
    // data.size.x - totalGaps - total size taken up by actual segments
    // totalFill 
    // 30deg, 15seg, 1dis
    // 2deg/seg, 1 dis
    // 1 / 15
    // 2 - (1/15)
    array<float> starts
    array<float> ends
    starts.append(0)
    for ( int i = 0; i < segmentCount; i++ )
    {
        ends.append(float(i + 1) / segmentCount - segmentDistance / 2)
        starts.append(float(i + 1) / segmentCount + segmentDistance / 2)
    }
    float scale = 1 / ends[segmentCount - 1]
    for ( int i = 0; i < segmentCount; i++ )
    {
        ends[i] *= scale
        // don't need to do the first one since 0 * anything = 0, and we have segmentCount + 1 values in the array.
        starts[i + 1] *= scale
    }

    // 5seg, 5deg
    // 0, 1, 2, 3, 4

	for ( int i = 0; i < segmentCount; i++ )
	{
		LTSRebalance_TopoData topoData
		topoData.topo = CreateBar(data.position, 
			data.angles + <0, starts[i] * data.size.x + (ends[i] - starts[i]) * data.size.x / 2 - data.size.x / 2, 0>, 
			(ends[i] - starts[i]) * data.size.x, 
			data.size.y)
		topoData.position = data.position
		topoData.angles = data.angles + <0, starts[i] * data.size.x + (ends[i] - starts[i]) * data.size.x / 2 - data.size.x / 2, 0>
		topoData.size = <(ends[i] - starts[i]) * data.size.x, data.size.y, 0>
		data.topoData.append( topoData )
	}

    for ( int i = 0; i < segmentCount; i++ )
    {
        var rui = RuiCreate( $"ui/basic_image.rpak", data.topoData[i].topo, RUI_DRAW_COCKPIT, -1 )
        data.imageRuis.append( rui )
    }
}

var function CreateBar( vector posOffset, vector angles, float hudWidth, float hudHeight )
{
    var topo = RuiTopology_CreateSphere( 
        COCKPIT_RUI_OFFSET + posOffset, // 
        AnglesToRight( angles ), // right
        AnglesToUp( angles ) * -1, // down 
        COCKPIT_RUI_RADIUS, 
        hudWidth, 
        hudHeight, 
        COCKPIT_RUI_SUBDIV // 3.5
    ) 
    return topo
}

var function LTSRebalance_BasicImageBar_SetFillFrac( LTSRebalance_BarTopoData barData, float progress )
{
    if ( barData.fill == progress )
        return
    barData.fill = progress
	for ( int i = barData.segments - 1; i >= 0; i-- )
	{
		LTSRebalance_TopoData data = barData.topoData[i]
		// RuiTopology_UpdatePos( clGlobal.topoCockpitHudPermanent, < COCKPIT_RUI_OFFSET.x, COCKPIT_RUI_OFFSET.y, COCKPIT_RUI_OFFSET.z + 200.0 >, <0, -1, 0>, <0, 0, -1> )
		//  9,  8,  7,  6,  5,  4,  3,  2,  1,  0
		//  0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9
		float minProgress = float(barData.segments - i - 1) / barData.segments
		float maxProgress = minProgress + (1.0 / barData.segments)
		float segProgress = Graph( progress, minProgress, maxProgress, 0.0, 1.0 )
		// this segment is supposed to be full
		if ( progress >= maxProgress )
		{
			RuiTopology_UpdatePos( data.topo, COCKPIT_RUI_OFFSET + data.position, AnglesToRight( data.angles ), AnglesToUp( data.angles ) * -1 )
			RuiTopology_UpdateSphereArcs( data.topo, data.size.x, data.size.y, 10 )
		}
		else if ( progress > minProgress )
		{
			RuiTopology_UpdatePos( data.topo, COCKPIT_RUI_OFFSET + data.position, AnglesToRight( data.angles - <0, data.size.x * segProgress / 2 - data.size.x / 2, 0> ), AnglesToUp( data.angles - <0, data.size.x * segProgress / 2 - data.size.x / 2, 0> ) * -1 )
			RuiTopology_UpdateSphereArcs( data.topo, data.size.x * segProgress, data.size.y, 10 )
		}
		else 
		{
			// no need to update position since we update it then we "unhide" the topo, just set width to 0.
			RuiTopology_UpdateSphereArcs( data.topo, 0, 0, 10 )
		}
	}
}